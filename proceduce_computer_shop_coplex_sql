USE computer_shop;
-- 1. Procedure: GetCustomerOrderHistory
-- Description: Retrieves a comprehensive history for a given customer, including their orders,
--              the items within each order, and associated payment transaction details.
-- select * from customer;
-- call GetCustomerOrderHistory(3);
DELIMITER //
CREATE PROCEDURE GetCustomerOrderHistory(IN p_customer_id INT)
BEGIN
    SELECT
        o.order_id,
        o.order_date,
        o.order_status,
        a.street_line,
        a.commune,
        a.district,
        a.province,
        oi.product_code,
        p.name AS product_name,
        oi.qty,
        oi.price_at_purchase,
        (oi.qty * oi.price_at_purchase) AS item_total,
        pt.transaction_id,
        pt.amount AS transaction_amount,
        pt.status AS transaction_status,
        pt.transaction_date AS payment_date,
        pm.pay_method
    FROM
        orders o
    JOIN
        address a ON o.address_id = a.address_id
    JOIN
        orderitem oi ON o.order_id = oi.order_id
    JOIN
        product p ON oi.product_code = p.product_code
    LEFT JOIN
        paymenttransaction pt ON o.order_id = pt.order_id
    LEFT JOIN
        paymentmethod pm ON pt.pay_method_id = pm.pay_method_id
    WHERE
        o.customer_id = p_customer_id
    ORDER BY
        o.order_date DESC, oi.product_code;
END //
DELIMITER ;
-- 2. Procedure: GenerateMonthlySalesSummary
-- Description: Generates a summary of sales by product category for a specified month and year,
--              including total revenue and number of items sold per category.
DELIMITER //
CREATE PROCEDURE GenerateMonthlySalesSummary(IN p_year INT, IN p_month INT)
BEGIN
    SELECT
        c.category_id,
        c.title AS category_name,
        SUM(oi.qty * oi.price_at_purchase) AS total_revenue,
        SUM(oi.qty) AS total_items_sold
    FROM
        orders o
    JOIN
        orderitem oi ON o.order_id = oi.order_id
    JOIN
        product p ON oi.product_code = p.product_code
    JOIN
        category c ON p.category_id = c.category_id
    WHERE
        YEAR(o.order_date) = p_year AND MONTH(o.order_date) = p_month
        AND o.order_status IN ('Delivered', 'Processing', 'Completed') -- Consider relevant statuses for sales
    GROUP BY
        c.category_id, c.title
    ORDER BY
        total_revenue DESC;
END //
DELIMITER ;


-- select * from product p ;
-- select * from supplier s ;
-- select * from staff;
-- select * from productsupplier;
-- call RestockProduct('ACC001',2,50,20.30,3);
DELIMITER //

-- Procedure 3: Restock Product
-- Purpose: Restocks a product, updates inventory log, and associates with a supplier.
CREATE PROCEDURE RestockProduct(
    IN p_product_code VARCHAR(50),
    IN p_supplier_id INT,
    IN p_quantity INT,
    IN p_supply_cost DECIMAL(10, 2),
    IN p_staff_id INT
)
BEGIN
    DECLARE exit handler FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error restocking product';
    END;

    START TRANSACTION;

    -- Validate inputs
    IF NOT EXISTS (SELECT 1 FROM product WHERE product_code = p_product_code AND is_active = TRUE)
        OR NOT EXISTS (SELECT 1 FROM supplier WHERE supplier_id = p_supplier_id)
        OR NOT EXISTS (SELECT 1 FROM staff WHERE staff_id = p_staff_id AND is_active = TRUE)
        OR p_quantity <= 0 OR p_supply_cost < 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid product, supplier, staff, or restock values';
    END IF;

    -- Update product stock
    UPDATE product
    SET stock_quantity = stock_quantity + p_quantity,
        last_restock_date = CURDATE()
    WHERE product_code = p_product_code;

    -- Log inventory change
    INSERT INTO inventorylog (product_code, staff_id, change_type, quantity_change, note)
    VALUES (p_product_code, p_staff_id, 'Restock', p_quantity, CONCAT('Restocked by supplier ID: ', p_supplier_id));

    -- Record supplier transaction
    INSERT INTO productsupplier (product_code, supplier_id, supply_cost, supply_date, quantity)
    VALUES (p_product_code, p_supplier_id, p_supply_cost, CURDATE(), p_quantity);

    COMMIT;
END //
DELIMITER ;

call GetStaffPerformanceOverview(4);
-- 4. Procedure: GetStaffPerformanceOverview
-- Description: Provides an overview of staff performance, including their total sales
--              (if applicable through orders they managed/processed) and inventory activities.
DELIMITER //
CREATE PROCEDURE GetStaffPerformanceOverview(IN p_staff_id INT)
BEGIN
    SELECT
        s.staff_id,
        s.name AS staff_name,
        s.position,
        s.hire_date,
        (SELECT COUNT(DISTINCT o.order_id)
         FROM orders o
         -- Assuming a staff_id column in orders or a linking table for staff to orders
         -- For this schema, we'll use inventorylog as a proxy for activity
         JOIN inventorylog il ON il.staff_id = s.staff_id
         WHERE o.order_id IN (SELECT DISTINCT order_id FROM orderitem JOIN product ON orderitem.product_code = product.product_code JOIN inventorylog ON product.product_code = inventorylog.product_code WHERE inventorylog.staff_id = s.staff_id)
        ) AS orders_processed_count,
        (SELECT SUM(il.quantity_change)
         FROM inventorylog il
         WHERE il.staff_id = s.staff_id AND il.change_type = 'Addition'
        ) AS total_inventory_additions,
        (SELECT SUM(il.quantity_change)
         FROM inventorylog il
         WHERE il.staff_id = s.staff_id AND il.change_type = 'Removal'
        ) AS total_inventory_removals
    FROM
        staff s
    WHERE
        s.staff_id = p_staff_id;
END //
DELIMITER ;

-- 5. Procedure: GetPaymentMethodUsage
-- Description: Summarizes the usage of each payment method, including total transactions
--              and total amount processed through each method.
DELIMITER //
CREATE PROCEDURE GetPaymentMethodUsage()
BEGIN
    SELECT
        pm.pay_method_id,
        pm.pay_method,
        pm.company_handle,
        COUNT(pt.transaction_id) AS total_transactions,
        SUM(pt.amount) AS total_amount_processed
    FROM
        paymentmethod pm
    LEFT JOIN
        paymenttransaction pt ON pm.pay_method_id = pt.pay_method_id
    GROUP BY
        pm.pay_method_id, pm.pay_method, pm.company_handle
    ORDER BY
        total_amount_processed DESC;
END //
DELIMITER ;

-- 6. Procedure: GetRecentlyAddedProducts
-- Description: Lists products added or restocked within a specified number of days,
--              providing details about their stock and category.
DELIMITER //
CREATE PROCEDURE GetRecentlyAddedProducts(IN p_days INT)
BEGIN
    SELECT
        p.product_code,
        p.name AS product_name,
        p.price,
        p.stock_quantity,
        p.last_restock_date,
        c.title AS category_name,
        b.name AS brand_name
    FROM
        product p
    LEFT JOIN
        category c ON p.category_id = c.category_id
    LEFT JOIN
        brand b ON p.brand_id = b.id
    WHERE
        p.last_restock_date >= DATE_SUB(CURRENT_DATE(), INTERVAL p_days DAY)
    ORDER BY
        p.last_restock_date DESC;
END //
DELIMITER ;